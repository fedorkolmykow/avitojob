// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels(in *jlexer.Lexer, out *TransferResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			(out.Source).UnmarshalEasyJSON(in)
		case "target":
			(out.Target).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels(out *jwriter.Writer, in TransferResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		(in.Source).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(in.Target).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels1(in *jlexer.Lexer, out *TransferReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "change":
			out.Change = float64(in.Float64())
		case "target_id":
			out.TargetId = int(in.Int())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels1(out *jwriter.Writer, in TransferReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"change\":"
		out.RawString(prefix)
		out.Float64(float64(in.Change))
	}
	{
		const prefix string = ",\"target_id\":"
		out.RawString(prefix)
		out.Int(int(in.TargetId))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels1(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels2(in *jlexer.Lexer, out *Transactions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]Transaction, 0, 0)
					} else {
						out.Transactions = []Transaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Transaction
					(v1).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ChangeSort":
			out.ChangeSort = bool(in.Bool())
		case "TimeSort":
			out.TimeSort = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels2(out *jwriter.Writer, in Transactions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Transactions\":"
		out.RawString(prefix[1:])
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Transactions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ChangeSort\":"
		out.RawString(prefix)
		out.Bool(bool(in.ChangeSort))
	}
	{
		const prefix string = ",\"TimeSort\":"
		out.RawString(prefix)
		out.Bool(bool(in.TimeSort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transactions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transactions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transactions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transactions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels2(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels3(in *jlexer.Lexer, out *Transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trans_id":
			out.TransId = int(in.Int())
		case "init_balance":
			out.InitialBalance = float64(in.Float64())
		case "change":
			out.Change = float64(in.Float64())
		case "change_time":
			out.ChangeTime = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels3(out *jwriter.Writer, in Transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trans_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TransId))
	}
	{
		const prefix string = ",\"init_balance\":"
		out.RawString(prefix)
		out.Float64(float64(in.InitialBalance))
	}
	{
		const prefix string = ",\"change\":"
		out.RawString(prefix)
		out.Float64(float64(in.Change))
	}
	{
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		out.String(string(in.ChangeTime))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels3(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels4(in *jlexer.Lexer, out *Rate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rates":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Rates = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 float64
					v4 = float64(in.Float64())
					(out.Rates)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "base":
			out.Base = string(in.String())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels4(out *jwriter.Writer, in Rate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rates\":"
		out.RawString(prefix[1:])
		if in.Rates == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Rates {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"base\":"
		out.RawString(prefix)
		out.String(string(in.Base))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels4(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels5(in *jlexer.Lexer, out *GetTransactionsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]Transaction, 0, 0)
					} else {
						out.Transactions = []Transaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Transaction
					(v6).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels5(out *jwriter.Writer, in GetTransactionsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Transactions {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTransactionsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTransactionsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTransactionsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTransactionsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels5(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels6(in *jlexer.Lexer, out *GetTransactionsReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "page":
			out.Page = int(in.Int())
		case "per_page":
			out.TransactionsOnPage = int(in.Int())
		case "change_sort":
			out.ChangeSort = bool(in.Bool())
		case "time_sort":
			out.TimeSort = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels6(out *jwriter.Writer, in GetTransactionsReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		out.Int(int(in.TransactionsOnPage))
	}
	{
		const prefix string = ",\"change_sort\":"
		out.RawString(prefix)
		out.Bool(bool(in.ChangeSort))
	}
	{
		const prefix string = ",\"time_sort\":"
		out.RawString(prefix)
		out.Bool(bool(in.TimeSort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTransactionsReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTransactionsReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTransactionsReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTransactionsReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels6(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels7(in *jlexer.Lexer, out *GetBalanceResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "balance":
			out.Balance = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels7(out *jwriter.Writer, in GetBalanceResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.Float64(float64(in.Balance))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBalanceResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBalanceResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBalanceResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBalanceResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels7(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels8(in *jlexer.Lexer, out *GetBalanceReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "Currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels8(out *jwriter.Writer, in GetBalanceReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"Currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBalanceReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBalanceReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBalanceReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBalanceReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels8(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels9(in *jlexer.Lexer, out *ChangeBalanceResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "balance":
			out.Balance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels9(out *jwriter.Writer, in ChangeBalanceResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.Float64(float64(in.Balance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeBalanceResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeBalanceResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeBalanceResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeBalanceResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels9(l, v)
}
func easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels10(in *jlexer.Lexer, out *ChangeBalanceReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int(in.Int())
		case "change":
			out.Change = float64(in.Float64())
		case "comment":
			out.Comment = string(in.String())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels10(out *jwriter.Writer, in ChangeBalanceReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"change\":"
		out.RawString(prefix)
		out.Float64(float64(in.Change))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeBalanceReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeBalanceReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson45d5b42eEncodeGithubComFedorkolmykowAvitojobPkgModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeBalanceReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeBalanceReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson45d5b42eDecodeGithubComFedorkolmykowAvitojobPkgModels10(l, v)
}
